package Network;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

// Class to simulate DHCP Server 
public class DHCPServer {

	private Map<String, String> ipAllocations = new HashMap<>();
	private Map<String, IPPool> ipPools = new HashMap<>();
	
	public void configureIpPool(Scanner scanner) {
        int startIP, endIP;
        String poolName;
        ErrorMessages error;
 		
        IPPool newPool = new IPPool();
        
        do {
        	System.out.println("Enter name of IP pool: ");
     		poolName = scanner.nextLine();
     		
            System.out.print("Enter the start of the IP pool: ");
            startIP = validateScannerInput(scanner);
                 
            System.out.print("Enter the end of the IP pool: ");
            endIP = validateScannerInput(scanner);
            
            error = newPool.checkIP(startIP,endIP);
            
            if (error == null) {
                break;  // Exit loop if no errors
            }
            System.out.println("ERROR: " + error.getMessage());
             
        }while(error != null);
        
        
		ipPools.put(poolName, newPool); 
		
		System.out.println("New IP pool " + poolName + " created successfully!");

        newPool.setIpPool(startIP, endIP);
    }
	
	// Method to assign an IP to a device
	// edit method so that available IPs for that pool are retrieved based on pool name
    public String assignIp(String poolName, String macAddress) {
    	//retrieve correct IP pool from ipPools Map
    	IPPool pool = ipPools.get(poolName);
    	
        if (ipAllocations.containsKey(macAddress)) {
            return ipAllocations.get(macAddress);
        }

        if (availableIPs.isEmpty()) {
            System.out.println("No available IP addresses in the pool!");
            return null;
        }

        String assignedIp = availableIPs.iterator().next();
        availableIPs.remove(assignedIp);
        ipAllocations.put(macAddress, assignedIp);

        return assignedIp;
    }
    
	public void printPools()
	{
		if(ipPools.isEmpty())
		{
			System.out.println("No IP pools have been created.");
		}
		else
		{
			System.out.println("IP pools: ");
			for (IPPool value : ipPools.values()) 
			{
	            System.out.println("Value: " + value);
	        }
		}
	}
	
	private int validateScannerInput(Scanner scanner) {
        while (!scanner.hasNextInt()) {
            System.out.print("Invalid input! Please enter a valid number: ");
            scanner.next(); // Discard invalid input
        }
        return scanner.nextInt();
    }
	
}
