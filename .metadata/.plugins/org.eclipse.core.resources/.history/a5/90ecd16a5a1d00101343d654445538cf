package Network;

import java.util.ArrayList;  
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class NetworkSimulationRunner {
	
	public static void main(String[] args) {
		// initialize scanner object for reading in data
		Scanner scanner = new Scanner(System.in);
		
		// New Topology instance to keep track of connections
		Topology topology = new Topology();
		
		// create network manager instance to manage connecting devices
		NetworkManager manager = new NetworkManager(topology);
		
		topology.setNetworkManager(manager);
		
		List<Router> routers = new ArrayList<>();
		
		// create instances of router and DHCP
		Router router0 = new Router("Router0", "00:1A:1B:1C:1D:1E", "192.168.0.1");
		
		routers.add(router0);
		
		DHCPServer dhcpServer = new DHCPServer("DHCP Server", "00:2A:2B:3C:3D:3E");
		
		List<Switch> switches = new ArrayList<>();
		
		// ADD IN ERROR CHECKING FOR DEVICE NAMES: USER CANT USE SAME NAME FOR 2 DEVICES
		// Create Layer 2 and Layer 3 Switches
        Layer2Switch switch0 = new Layer2Switch("Switch0", "00:AA:BB:CC:DD:EE");
        Layer2Switch switch1 = new Layer2Switch("Switch1", "00:BB:CC:DD:EE:FF");
        Layer2Switch switch2 = new Layer2Switch("Switch2", "00:DD:EE:FF:AA:BB");
        Layer3Switch coreSwitch = new Layer3Switch("CoreSwitch", "00:CC:DD:EE:FF:AA");
		
        switches.add(switch0);
        switches.add(switch1);
        switches.add(switch2);
        switches.add(coreSwitch);
        
		List<Computer> computers = new ArrayList<>();
        
		//create instances of PCs and add them to computers list for easy processing
		Computer pc0 = new Computer("PC0", "00:2A:2B:2C:2D:2E");
		Computer pc1 = new Computer("PC1", "00:3A:3B:3C:3D:3E");
		Computer pc2 = new Computer("PC2", "00:4A:5B:6C:7D:8E");
		Computer pc3 = new Computer("PC3", "00:5A:6B:7C:8D:9E");
		Computer pc4 = new Computer("PC4", "00:5A:6B:7C:8D:9E");
		
		computers.add(pc0);
		computers.add(pc1);
		computers.add(pc2);
		computers.add(pc3);
		computers.add(pc4);
		
		//ensure that all devices are correctly registered in the network topology, i.e., the "system" knows they exist
		topology.registerDevice(router0);
		topology.registerDevice(switch0);
		topology.registerDevice(switch1);
		topology.registerDevice(switch2);
		topology.registerDevice(coreSwitch);
		topology.registerDevice(pc0);
		topology.registerDevice(pc1);
		topology.registerDevice(pc2);
		topology.registerDevice(pc3);
		topology.registerDevice(pc4); 
		topology.registerDevice(dhcpServer);
		
		//connect main switch to router
		topology.connectDevices(coreSwitch, router0);
		
		// connect switches to main switch
		topology.connectDevices(switch0, coreSwitch);
		topology.connectDevices(switch1,coreSwitch);
		topology.connectDevices(switch2,coreSwitch);
                
		//connect PCs to switche0
		topology.connectDevices(pc0, switch0);
		topology.connectDevices(pc1, switch0);
        
        //connect PCs to switch1
		topology.connectDevices(pc2, switch1);
		topology.connectDevices(pc3, switch1);
		
		topology.connectDevices(dhcpServer, switch2);
		
		dhcpServer.setIpAddress("192.168.0.5");
		
		System.out.println(dhcpServer.getIpAddress());
		
		topology.updateAdjacencyList();
        
        //devices don't get IP as the system doesn't know that the devices are connected to a router, as there's no "direct" connection.
        // -> use graph theory breath first search & adjacency dictionary????

        // Display network topology
     	topology.printNetworkTopology();
     	topology.printAdjacencyList();
     		
        int choice;
        
        do{
        	System.out.println("\n===== DHCP Server Setup =====");
            System.out.println("1. View existing IP Pools");
            System.out.println("2. Create a new IP Pool");
            System.out.println("3. Manage PCs");
            System.out.println("4. Manage Switches");
            System.out.println("5. Manage Routers");
            System.out.println("6. Add Connection"); 
            System.out.println("7. Remove Connection");
            System.out.println("8. Exit");
            System.out.print("Enter your choice: ");

            choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    dhcpServer.printPools();
                    break;
                case 2:
                    dhcpServer.configureIpPool(scanner);
                    break;
                case 3:
                	PCMenu.managePCs(scanner, dhcpServer, computers, manager);
                	break;
                case 4:
                	SwitchMenu.manageSwitches(switches, scanner, topology);
                	break; 
                case 5:
                	manageRouters(routers, scanner, topology); 
                	break;
                case 6:
                	TopologyMenu.addConnection(scanner,topology);
                	break; 
                case 7:
                	TopologyMenu.removeConnection(scanner,topology); 
                	break; 
                case 8:
                	break;
            }
        }while(choice !=8);
		
		router0.printAllocations();
		
		//switch0.printMacTable();
		
		dhcpServer.printPools();
		
		scanner.close();
		
		//implement further functionality for sending messages,etc.
    }

	private static void manageRouters(List<Router> routers, Scanner scanner, Topology topology) { 
		if (routers.isEmpty()) {
	        System.out.println("No routers available in the network.");
	        return;
	    }
		
		 System.out.println("\n===== Router Management =====");
		    for (int i = 0; i < routers.size(); i++) {
		        System.out.println((i + 1) + ". " + routers.get(i).getName());
		    }
		    
		    System.out.print("Select a router to manage: ");
		    int routerChoice = scanner.nextInt() - 1;

		    if (routerChoice < 0 || routerChoice >= routers.size()) {
		        System.out.println("Invalid selection.");
		        return;
		    }

		    Router selectedRouter = routers.get(routerChoice);
		    
		    configureRouter(selectedRouter, scanner, topology);
	}
	
	private static void configureRouter(Router router, Scanner scanner, Topology topology) {
		
		System.out.println("\nManaging " + router.getName());
		
		int choice;
	    do {
	        System.out.println("\n===== Router Configuration: " + router.getName() + " =====");
	        System.out.println("1. View IP Address");
	        System.out.println("2. Configure VLAN Interface");
	        System.out.println("3. Show VLAN Interfaces");
	        System.out.println("4. Configure IP Helper Address");
	        System.out.println("5. Assign IP to Port");
	        System.out.println("6. Show Port IP Assignments");
	        System.out.println("8. Back");
	        System.out.print("Enter your choice: ");

	        choice = scanner.nextInt();
	        scanner.nextLine(); // Consume newline

	        switch (choice) {
	            case 1:
	                System.out.println(router.getName() + " IP Address: " + router.getIpAddress());
	                break;
	            case 2:
	                System.out.print("\"Enter VLAN ID for the interface: ");
	                int vlanId = scanner.nextInt();
	                scanner.nextLine();
	                System.out.print("Enter IP Address for VLAN interface: ");
	                String ipAddress = scanner.nextLine();
	                router.configureVLANInterface(vlanId, ipAddress);
	                break;
	            case 3:
	                router.showVLANInterfaces();
	                break;
	            case 4:
	                System.out.print("Enter VLAN ID: ");
	                int helperVlanId = scanner.nextInt();
	                scanner.nextLine();
	                System.out.print("Enter DHCP Server IP Address: ");
	                String helperIp = scanner.nextLine();
	                router.configureIpHelper(helperVlanId, helperIp);
	                break;
	            case 5:
	            	System.out.println("Ports:");
	                List<String> ports = new ArrayList<>(router.portIpAssignments().keySet());
	                for (int j = 0; j < ports.size(); j++) {
	                    System.out.println((j + 1) + ". " + ports.get(j));
	                }
	                
	                System.out.print("Select port number: ");
	                int portChoice = scanner.nextInt();
	                String selectedPort = ports.get(portChoice - 1);
	                scanner.nextLine();

	                System.out.print("Enter IP Address to assign to " + selectedPort + ": ");
	                String portIp = scanner.nextLine();
	                router.assignIpToPort(selectedPort, portIp);
	                break;
	            case 6:
	                router.showPortIPs();
	                break;
	            case 7:
	                break;
	            default:
	                System.out.println("Invalid choice.");
	        }

	    } while (choice != 8);
		
	}
}
