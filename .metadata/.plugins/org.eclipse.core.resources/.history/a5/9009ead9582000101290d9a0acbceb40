package Menus;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import Devices.Device;
import Network.Topology;

public class TopologyMenu {
	
	public static void addConnection(Scanner scanner,Topology topology) {
		List<String> devices = new ArrayList<>(topology.getRegisteredDevices().keySet());
	    
	    System.out.println("\n===== Network Devices =====");
	    
	    // print devices
	    for(int i = 0;i<devices.size();i++) {
	    	System.out.println((i + 1) + ". " + devices.get(i));
	    }
	    
	    System.out.println("Enter device you wish to form a connection on: ");
	    int sourceDeviceIndex = scanner.nextInt() - 1;
	    
	    System.out.println("Enter device you wish to connect to : ");
	    int targetDeviceIndex = scanner.nextInt() - 1;
	    
	    String sourceDevice = devices.get(sourceDeviceIndex); 
	    String targetDevice = devices.get(targetDeviceIndex);
	    
	    Device source = topology.getRegisteredDevices().get(sourceDevice);
        Device target = topology.getRegisteredDevices().get(targetDevice);
        
        topology.connectDevices(source, target);
	}
	
	public static void removeConnection(Scanner scanner,Topology topology) {
		List<String> devices = new ArrayList<>(topology.getRegisteredDevices().keySet());
	    
	    System.out.println("\n===== Network Devices =====");
	    
	    // print devices
	    for(int i = 0;i<devices.size();i++) {
	    	System.out.println((i + 1) + ". " + devices.get(i));
	    }
	    
	    System.out.println("Enter device you wish to delete a connection from: ");
	    int sourceDeviceIndex = scanner.nextInt() - 1;
	    scanner.nextLine(); // consume newline

	    if (sourceDeviceIndex < 0 || sourceDeviceIndex >= devices.size()) {
	        System.out.println("Invalid selection.");
	        return;
	    }
	    
	    String sourceDevice = devices.get(sourceDeviceIndex); 
	    Device source = topology.getRegisteredDevices().get(sourceDevice);
	    
	    Map<String, Device> ports = topology.getTopology().get(sourceDevice);
	    List<String> connectedDevices = new ArrayList<>();

	    if (ports != null) {
	        for (Device connectedDevice : ports.values()) {
	            if (connectedDevice != null && !connectedDevices.contains(connectedDevice.getName())) {
	                connectedDevices.add(connectedDevice.getName());
	            }
	        }
	    }

	    if (connectedDevices.isEmpty()) {
	        System.out.println(sourceDeviceName + " has no active connections.");
	        return;
	    }

	    System.out.println("\nConnected Devices:");
	    for (int i = 0; i < connectedDevices.size(); i++) {
	        System.out.println((i + 1) + ". " + connectedDevices.get(i));
	    }
	    
	    System.out.println("Enter device you wish to disconnect: ");
	    int targetDeviceIndex = scanner.nextInt() - 1;
	    
	    String targetDevice = devices.get(targetDeviceIndex);
        Device target = topology.getRegisteredDevices().get(targetDevice);
        
        topology.disconnectDevices(source, target);
	}
	
}
