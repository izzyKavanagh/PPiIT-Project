package Menus;

import java.util.List;
import java.util.Scanner;
import Devices.DHCPServer;
import Network.Topology;

/**
 * The DHCPServerMenu class provides a console-based interface
 * for managing DHCP server devices within a network simulation.
 * Users can configure server IP addresses, create and view IP pools, 
 * and inspect port connections for each DHCP server.
 * 
 * @author Izzy Kavanagh
 * @version 1.0
 */

public class DHCPServerMenu {

	/**
     * Displays a menu to list and manage all available DHCP servers.
     * Allows selection of a specific server and navigates to its configuration options.
     *
     * @param scanner - {@link Scanner} used for user input
     * @param dhcpServers - list of {@link DHCPServer} objects available in the network
     * @param topology - {@link Topology} of the network
     * @param mode - operating mode (e.g., guided or free mode)
     */
	public static void manageDHCPServers(Scanner scanner, List<DHCPServer> dhcpServers, Topology topology, int mode) {
        if (dhcpServers.isEmpty()) {
            System.out.println("No DHCP servers available.");
            return;
        }

        int serverChoice;
        
        do{
        	System.out.println("\n╔═══════════════════════════════════╗");
            System.out.println("║         DHCP Server List          ║");
            System.out.println("╠═══════════════════════════════════╣");

            for (int i = 0; i < dhcpServers.size(); i++) {
                System.out.printf("║ %2d. %-29s ║\n", (i + 1), dhcpServers.get(i).getName());
            }

            System.out.printf("║ %2d. %-29s ║\n", (dhcpServers.size() + 1), "Return to Main Menu");
            System.out.println("╚═══════════════════════════════════╝");
            System.out.print("Select a DHCP server to manage: ");

            serverChoice = Integer.parseInt(scanner.nextLine());

            if (serverChoice == dhcpServers.size() + 1) {
                return;
            }

            if (serverChoice < 1 || serverChoice > dhcpServers.size()) {
                System.out.println("Invalid selection. Please try again.");
                continue;
            }

            DHCPServer selectedServer = dhcpServers.get(serverChoice - 1);
            manageSingleDHCPServer(scanner, selectedServer, topology, mode);
            
        }while(serverChoice != (dhcpServers.size() + 1) && mode != 2);
    }

	/**
     * Displays a configuration menu for a selected DHCP server and allows users
     * to perform various operations such as configuring IP, managing IP pools,
     * and viewing port connections.
     *
     * @param scanner     the {@link Scanner} used for user input
     * @param dhcpServer  the selected {@link DHCPServer} to manage
     * @param topology    the {@link Topology} of the network
     * @param mode        the operating mode (e.g., guided or free)
     */
    private static void manageSingleDHCPServer(Scanner scanner, DHCPServer dhcpServer, Topology topology, int mode) {
    	int choice;
    	
    	do
    	{
    		System.out.println("\n╔══════════════════════════════════════════════╗");
            System.out.println("║        Managing DHCP Server: " + dhcpServer.getName());
            System.out.println("╠══════════════════════════════════════════════╣");
            System.out.println("║ 1. Configure Server IP Address               ║");
            System.out.println("║ 2. Create new IP pool                        ║");
            System.out.println("║ 3. View All IP pools                         ║");
            System.out.println("║ 4. View port connections                     ║");
            System.out.println("║ 5. Return to DHCP Server List                ║");
            System.out.println("╚══════════════════════════════════════════════╝");
            System.out.print("Select an option: ");

            choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
            	case 1:
            		configureDHCPServerIpAddress(scanner, dhcpServer);
            		break;
                case 2:
                	dhcpServer.configureIpPool(scanner);
                    break;
                case 3:
                	dhcpServer.printPools();
                    break;
                case 4:
                	topology.printPortConnections(dhcpServer);
                    return;
                case 5:
                	System.out.println("Exiting DHCP Server Menu...");
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }while(choice!=5 && mode != 2);
		
	}
    
    private static void configureDHCPServerIpAddress(Scanner scanner, DHCPServer dhcpServer) {
	    String currentIp = dhcpServer.getIpAddress();
	    if (currentIp == null || currentIp.isEmpty()) {
	        System.out.println("Current IP Address: IP not set");
	    } else {
	        System.out.println("Current IP Address: " + currentIp);
	    }

	    System.out.print("Would you like to set a new IP address? (Y/N): ");
	    String response = scanner.nextLine().trim().toLowerCase();
	    if (response.equalsIgnoreCase("Y")) {
	        System.out.print("Enter new IP address: ");
	        String newIp = scanner.nextLine();
	        dhcpServer.setIpAddress(newIp);
	        System.out.println("IP address updated to: " + newIp);
	    }
	}
}
