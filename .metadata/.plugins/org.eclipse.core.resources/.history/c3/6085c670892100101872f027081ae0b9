package Network;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import Devices.Computer;
import Devices.DHCPServer;
import Devices.DNSServer;
import Devices.Router;
import Devices.Switch;
import Devices.WebServer;
import Menus.FreeModeMenu;
import Menus.GuidedModeMenu;
import Menus.MainMenu;

/**
 * The NetworkSimulationRunner class serves as the entry point for simulating a network environment.
 * It initializes the network topology, manages the network devices, and allows the user to run the 
 * simulation in different modes (Free Mode or Guided Mode).
 * The simulation includes tasks like setting up devices, connecting them, and handling network-related operations.
 */
public class NetworkSimulationRunner {
	
	/**
	 * Main method to run the network simulation.
	 * This method initializes the network environment, handles user interaction, and runs the simulation in different modes.
	 * It also simulates task progress and prints a welcome message before entering the mode selection menu.
	 *
	 * @param args Command line arguments (not used in this simulation).
	 * @throws InterruptedException If the thread is interrupted during the task simulation.
	 */
	public static void main(String[] args) throws InterruptedException {
		// initialize scanner object for reading in data
		Scanner scanner = new Scanner(System.in);
		
		// New Topology instance to keep track of connections
		Topology topology = new Topology();
		
		// create network manager instance to manage connecting devices
		NetworkManager manager = new NetworkManager(topology);
		
		topology.setNetworkManager(manager);
		
		// Create lists to store devices for simulation
		List<Router> routers = new ArrayList<>();
		List<Switch> switches = new ArrayList<>();
		List<DHCPServer> dhcpServers = new ArrayList<>();
		List<DNSServer> dnsServers = new ArrayList<>();
		List<WebServer> webServers = new ArrayList<>();
		List<Computer> computers = new ArrayList<>();
				
        
        int totalTasks = 100;  // Example total tasks
        for (int i = 1; i <= totalTasks; i++) {
            // Simulate doing some work
            Thread.sleep(10); // Example delay

            // Print progress bar
            MainMenu.printProgress(i, totalTasks); 
        }
        
        MainMenu.printWelcomeMessage();
     		
        int mode;
        
        do{
        	
        	System.out.println("\n╔══════════════════════════════════════════════╗");
            System.out.println("║           🌐 NETWORK SIMULATION 🌐           ║");
            System.out.println("╚══════════════════════════════════════════════╝");
            System.out.println("               Select a Mode:");
            System.out.println("╔══════════════════════════════════════════════╗");
            System.out.println("║  1. 🛠  Free Mode                            ║");
            System.out.println("║  2. 🎯 Guided Mode                           ║");
            System.out.println("║  3. ❌ Exit Simulation                       ║");
            System.out.println("╚══════════════════════════════════════════════╝\n");
            System.out.print("Enter your choice: ");
            mode = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (mode) {
                case 1:
                	FreeModeMenu.mainMenu(scanner, topology, manager, routers, computers, switches, dhcpServers, dnsServers, webServers, mode);
                    break;
                case 2:
                	GuidedModeMenu.mainMenu(scanner, topology, manager, routers, computers, switches, dhcpServers, dnsServers, webServers, mode);
                	break;
                case 3:
                    System.out.println("Closing simulation. Goodbye!");
                    break;
                default: System.out.println("ERROR: Invalid choice. Please try again.");
                	break;
            }
            
        }while(mode !=3);
		
		scanner.close();
    }
}
