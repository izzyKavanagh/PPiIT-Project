package Network;

import java.util.Map;

import DeviceComponents.VLANInterface;
import Devices.DHCPServer;
import Devices.Device;
import Devices.Layer2Switch;
import Devices.Layer3Switch;
import Devices.Router;

/**
 * NetworkManager is responsible for managing network-related tasks,
 * including static IP allocation, finding Layer 3 devices, and finding DHCP servers.
 * It interacts with the network topology to assign IPs to devices and configure networking
 * settings based on network topology.
 */
public class NetworkManager {
	private Topology topology;
	
	/**
     * Constructor for NetworkManager, initializing it with a given network topology.
     * 
     * @param topology - network topology that this manager will operate on.
     */
	public NetworkManager(Topology topology) {
        this.topology = topology;
    }

	/**
     * Allocates a static IP address to the specified device.
     * The IP address is assigned by a connected router, if one exists.
     * If no router is connected, an error message is displayed.
     * 
     * @param device - device that needs a static IP allocation.
     */
    public void useStaticIpAllocation(Device device) {
    	
    	topology.updateAdjacencyList();
    	
    	Device connectedRouter = topology.checkIfConnected(device, Router.class);

    	if (connectedRouter != null && !(device instanceof Layer2Switch)) {
    	    Router router = (Router) connectedRouter;
    	    String ip = router.assignStaticIP(device.getMacAddress());
    	    device.ipAddress = ip;
    	    System.out.println(device.getName() + " assigned IP: " + ip);
    	}
    	
    	if(connectedRouter == null) 
    	{
    		System.out.println("ERROR: No router found on " + device.getName() + "'s network.");
    	}
    	
    }
   
    /**
     * Finds the first connected Layer 3 device (either a Layer 3 Switch or a Router) 
     * and retrieves the corresponding VLAN interface information, including the gateway IP and helper IP.
     * 
     * @param device - device for which to find the Layer 3 device and retrieve network settings.
     * @return The helper IP address associated with the device's VLAN, or null if not found.
     */
    public String findLayer3Device(Device device) 
    {	
    	String gatewayIP, helperIP;
    	
    	int vlanId = device.getVlanId();
    	
    	Device connectedSwitch = topology.checkIfConnected(device, Layer3Switch.class);
    	
    	Device connectedRouter = topology.checkIfConnected(device, Router.class);

    	if (connectedSwitch != null) 
    	{
    	    Layer3Switch layer3Switch = (Layer3Switch) connectedSwitch;
    	    Map<Integer, VLANInterface> vlanInterfaceMap = layer3Switch.getVLANInterfaces();
    	    VLANInterface vlanIntf = vlanInterfaceMap.get(vlanId);
    	    
    	    if(vlanIntf == null) 
    	    {
    	    	System.out.println("No VLAN Interface set up for VLAN " + vlanId);
    	    	return null;
    	    }
    	    
    	    gatewayIP = vlanIntf.getIpAddress();
	    	device.setGatewayIp(gatewayIP);
	    	helperIP = vlanIntf.getHelperAddress();
	    	
	    	if(helperIP != null) {
	    		return helperIP;
	    	}
	    	else 
    	    {
    	    	System.out.println("No helper IP was found for VLAN " + vlanId);
    	    	return null;
    	    }
    	}
    	else if(connectedRouter != null) 
    	{
    		Router router = (Router) connectedRouter;
    	    Map<Integer, VLANInterface> vlanInterfaceMap = router.getVLANInterfaces();
    	    VLANInterface vlanIntf = vlanInterfaceMap.get(vlanId);
    	    
    	    if(vlanIntf == null) 
    	    {
    	    	System.out.println("No VLAN Interface set up for VLAN " + vlanId);
    	    	return null;
    	    }
    	    
    	    gatewayIP = vlanIntf.getIpAddress();
	    	device.setGatewayIp(gatewayIP);
	    	helperIP = vlanIntf.getHelperAddress();
	    	
	    	if(helperIP != null) {
	    		return helperIP;
	    	}
	    	else 
    	    {
    	    	System.out.println("No helper IP was found for VLAN " + vlanId);
    	    	return null;
    	    }
    	}
    	else 
    	{
    		System.out.println("ERROR: No layer 3 device found on " + device.getName() + "'s network.");
    	}
    	
    	return null;
    }
    
    /**
     * Finds the DHCP server in the network and assigns an IP address to the device 
     * based on the DHCP server's configuration, provided the helper IP matches the VLAN Interface's IP.
     * 
     * @param device - device requesting a dynamic IP.
     * @param gatewayIP - gateway IP address for the device.
     * @param helperIP - helper IP address for the VLAN.
     */
    public void findDHCPServer(Device device, String gatewayIP, String helperIP) {
    	
    	Device connectedDHCP = topology.checkIfConnected(device, DHCPServer.class);

    	if (connectedDHCP != null) 
    	{
    	    DHCPServer dhcpServer = (DHCPServer) connectedDHCP;
    	    String ip = dhcpServer.getIpAddress();
    	    
    	    if(ip.equalsIgnoreCase(helperIP)) 
    	    {
    	    	String dynamicIP = dhcpServer.assignIp(gatewayIP, device.getMacAddress(), device);
        	    device.ipAddress = dynamicIP;
        	    System.out.println("DHCP Server found!");
        	    System.out.println(device.getName() + " assigned IP: " + dynamicIP);
    	    }
    	    else
    	    {
    	    	System.out.println("Unable to find DHCP Server with ip matching VLAN's IP helper address: " + helperIP);
    	    }
    	}
    	else
    	{
    		System.out.println("ERROR: No DHCP server found on " + device.getName() + "'s network.");
    	}
    }

    /**
     * Retrieves the network topology associated with this NetworkManager.
     * 
     * @return The current network topology.
     */
    public Topology getTopology() {
        return topology;
    }
}

