package Devices;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

import DeviceComponents.IPPool;
import Network.ErrorMessages;

/**
 * Represents a DHCP server in the network simulation
 * Responsible for configuring IP pools, assigning IP addresses to devices,
 * and managing the availability of IP addresses within defined pools.
 */
public class DHCPServer extends Device{

	// Stores the IP allocations per MAC address
	private Map<String, String> ipAllocations = new HashMap<>();
	
	// Stores IP pools indexed by their gateway IPs
	private Map<String, IPPool> ipPools = new HashMap<>();
	
	private final int totalPorts = 1;
	private int nextPoolNumber = 0;
	
	/**
     * Constructs a DHCPServer with the specified name and MAC address.
     *
     * @param name - the name of the DHCP server
     * @param macAddress - the MAC address of the server
     */
	public DHCPServer(String name, String macAddress) {
		super(name, macAddress);
	}
	
	/**
     * Returns the number of ports on the DHCP server.
     *
     * @return the number of total ports (always 1 for DHCP server)
     */
	@Override
	public int getTotalPorts()
	{
		return totalPorts;
	}
	
	/**
     * Allows user input to configure a new IP pool via the console.
     * Includes validation of sub-net and range values.
     *
     * @param scanner a Scanner instance to read user input
     */
	public void configureIpPool(Scanner scanner) {
        int startIP, endIP, subNetwork;
        String poolName, gatewayIP;
        ErrorMessages error;
        
        System.out.println("Enter name of IP pool: ");
 		poolName = scanner.nextLine();
 		
 		System.out.print("Enter the gateway IP for the pool: ");
        gatewayIP = scanner.nextLine();
        
        System.out.print("Enter the DNS server IP for the pool (leave blank if none): ");
        String dnsIP = scanner.nextLine();
        
        // assign a unique pool number automatically
        int assignedPoolNumber = nextPoolNumber++;
        
        IPPool newPool = new IPPool(poolName, assignedPoolNumber, gatewayIP);
        
        newPool.setDnsServerIP(dnsIP);
        
        do {
        	
        	System.out.print("Enter the sub network of the IP pool: ");
            subNetwork = validateScannerInput(scanner);
            
            System.out.print("Enter the start of the IP pool: ");
            startIP = validateScannerInput(scanner);
                 
            System.out.print("Enter the end of the IP pool: ");
            endIP = validateScannerInput(scanner);
            
            error = newPool.checkIP(startIP,endIP,subNetwork);
            
            if (error == null) 
            {
                break;  // Exit loop if no errors
            }
            System.out.println("ERROR: " + error.getMessage());
             
        }while(error != null);
        
        newPool.setIpPoolRange(startIP, endIP, subNetwork); 
        
        ipPools.put(gatewayIP,newPool);
		
		System.out.println("New IP pool " + poolName + " (Pool #" + assignedPoolNumber + ") created successfully!");
    }
	
	// Method to assign an IP to a device
	// edit method so that available IPs for that pool are retrieved based on pool name
    public String assignIp(String gatewayIP, String macAddress, Device device) {
    	
    	//retrieve correct IP pool from ipPools Map
    	IPPool pool = ipPools.get(gatewayIP);
    	
    	if (pool == null) {
            System.out.println("ERROR: IP pool with gatewayIP"+ gatewayIP +" does not exist.");
            return null;
        }
    	
    	//get available IPs from the pool
    	Set<String> availableIPs = pool.getAvailableIPs();
    	
        if (ipAllocations.containsKey(macAddress)) {
            return ipAllocations.get(macAddress);
        }

        if (availableIPs.isEmpty()) {
            System.out.println("ERROR: No available IP addresses in the pool.");
            return null;
        }

        String assignedIp = availableIPs.iterator().next();
        availableIPs.remove(assignedIp);
        ipAllocations.put(macAddress, assignedIp);
        
        device.setDnsServerIP(pool.getDnsServerIP());

        return assignedIp;
    }
    
	public void printPools()
	{
		if (ipPools.isEmpty()) {
            System.out.println("No IP pools have been created.");
            return;
        }

        System.out.println("\nIP Pools:");
        for (IPPool pool : ipPools.values()) {
            System.out.println("Pool Name: " + pool.getPoolName());
            System.out.println("Pool Number: " + pool.getPoolNumber());
            System.out.println("Gateway IP: " + pool.getGatewayIP());
            System.out.println("Available IPs: " + pool.getAvailableIPs());
            System.out.println();
        }
	}
	
	public boolean poolExists(String poolName) {
	    return ipPools.containsKey(poolName);
	}
	
	
	private int validateScannerInput(Scanner scanner) {
        while (!scanner.hasNextInt()) {
            System.out.print("Invalid input! Please enter a valid number: ");
            scanner.next(); // Discard invalid input
        }
        return scanner.nextInt();
    }

	public Map<String, IPPool> getPools() {
		return ipPools;
	}
	
}
