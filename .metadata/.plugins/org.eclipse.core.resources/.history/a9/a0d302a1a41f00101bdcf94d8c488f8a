package Network;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import Network.Topology;
import Devices.Device;

public class TopologyVisualiser extends JFrame {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Topology topology;

    public TopologyVisualiser(Topology topology) {
        this.topology = topology;
        setTitle("Network Topology Viewer");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        add(new TopologyPanel());
        setLocationRelativeTo(null); // Center window
        setVisible(true);
    }

    // Custom panel for drawing topology
    class TopologyPanel extends JPanel {
        /**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		Map<String, Point> devicePositions = new HashMap<>();

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            Map<String, List<String>> adjacencyList = topology.updateAdjacencyList();
            Map<String, Device> devices = topology.getRegisteredDevices();

            // Random positions for each device (could enhance with a layout algo later)
            Random rand = new Random();
            for (String deviceName : devices.keySet()) {
                if (!devicePositions.containsKey(deviceName)) {
                    int x = 100 + rand.nextInt(600);
                    int y = 100 + rand.nextInt(400);
                    devicePositions.put(deviceName, new Point(x, y));
                }
            }

            // Draw connections (lines)
            g.setColor(Color.GRAY);
            for (Map.Entry<String, List<String>> entry : adjacencyList.entrySet()) {
                String deviceName = entry.getKey();
                Point p1 = devicePositions.get(deviceName);
                for (String connectedDevice : entry.getValue()) {
                    Point p2 = devicePositions.get(connectedDevice);
                    g.drawLine(p1.x, p1.y, p2.x, p2.y);
                }
            }

            // Draw devices (circles)
            for (Map.Entry<String, Point> entry : devicePositions.entrySet()) {
                String deviceName = entry.getKey();
                Point p = entry.getValue();

                g.setColor(Color.CYAN);
                g.fillOval(p.x - 20, p.y - 20, 40, 40);

                g.setColor(Color.BLACK);
                g.drawOval(p.x - 20, p.y - 20, 40, 40);

                // Device name label
                g.drawString(deviceName, p.x - 20, p.y - 25);
            }
        }
    }
}
