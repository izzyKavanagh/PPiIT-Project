package Network;

import javax.swing.*;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Color;
import java.util.*;
import Devices.Device;

public class TopologyVisualiser extends JFrame {
	private Topology topology;
    private Map<Device, Point> devicePositions;

    public TopologyVisualiser(Topology topology) {
        this.topology = topology;
        this.devicePositions = new HashMap<>();
        setBackground(Color.WHITE);
        assignPositions();
    }

    private void assignPositions() {
        int width = 700;
        int height = 500;

        int routerX = width / 2 - 50;
        int routerY = 50;

        int switchY = 200;
        int pcY = 350;
        int serverY = 450;

        int switchSpacing = 150;
        int pcSpacing = 100;
        int serverSpacing = 100;

        int switchX = 100;
        int pcX = 50;
        int serverX = 50;

        // Position Router(s)
        for (Device device : topology.getRegisteredDevices()) {
            if (device.getClass().getSimpleName().contains("Router")) {
                devicePositions.put(device, new Point(routerX, routerY));
            }
        }

        // Position Switches
        for (Device device : topology.getRegisteredDevices()) {
            if (device.getClass().getSimpleName().contains("Switch")) {
                devicePositions.put(device, new Point(switchX, switchY));
                switchX += switchSpacing;
            }
        }

        // Position PCs
        for (Device device : topology.getRegisteredDevices()) {
            if (device.getClass().getSimpleName().equals("Computer")) {
                devicePositions.put(device, new Point(pcX, pcY));
                pcX += pcSpacing;
            }
        }

        // Position Servers
        for (Device device : topology.getRegisteredDevices()) {
            if (device.getClass().getSimpleName().contains("Server")) {
                devicePositions.put(device, new Point(serverX, serverY));
                serverX += serverSpacing;
            }
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Draw connections
        g.setColor(Color.GRAY);
        for (Device d1 : topology.getAdjacencyList().keySet()) {
            Point p1 = devicePositions.get(d1);
            for (Device d2 : topology.getAdjacencyList().get(d1)) {
                Point p2 = devicePositions.get(d2);
                g.drawLine(p1.x + 25, p1.y + 25, p2.x + 25, p2.y + 25);
            }
        }

        // Draw devices
        for (Device device : topology.getRegisteredDevices()) {
            Point p = devicePositions.get(device);
            g.setColor(Color.CYAN);
            g.fillRect(p.x, p.y, 50, 50);
            g.setColor(Color.BLACK);
            g.drawRect(p.x, p.y, 50, 50);
            g.drawString(device.getName(), p.x, p.y + 65);
        }
    }
}
