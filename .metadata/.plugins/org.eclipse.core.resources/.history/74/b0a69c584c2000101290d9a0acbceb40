package Devices;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Random;
import java.util.Set;

public abstract class Device {

	protected String name;
    protected String macAddress;
    public String ipAddress;
    protected String gatewayIP;
    protected String dnsServerIP;
    protected Router connectedRouter;
	protected Switch connectedSwitch;
	public boolean staticIP; // default is static IP
	protected int totalPorts;
	protected int vlanId;
	
	protected Map<String, String> arpTable = new HashMap<>();
	private static final Set<String> usedMacs = new HashSet<>();
	private static final Random random = new Random();

	public void addArpEntry(String ip, String mac) {
	    arpTable.put(ip, mac);
	}

	public String lookupMac(String ip) {
	    return arpTable.get(ip);
	}

    public int getVlanId() {
		return vlanId;
	}

	public void setVlanId(int vlandId) {
		this.vlanId = vlandId;
	}
	
	public void setDnsServerIP(String dnsServerIP) {
	    this.dnsServerIP = dnsServerIP;
	}

	public String getDnsServerIP() {
	    return dnsServerIP;
	}

	public Device(String name, String macAddress) {
        this.name = name;
        this.macAddress = macAddress;
        this.ipAddress = null; // Assigned by DHCP
        this.staticIP = true;
    }

    public String getName() {
        return name;
    }

    public String getMacAddress() {
        return macAddress;
    }

    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }
    
    public String getIpAddress() {
        return ipAddress;
    }
    
    public void setGatewayIp(String gatewayIP) {
        this.gatewayIP = gatewayIP;
    }
    
    public String getGatewayIp() {
        return gatewayIP;
    }
    
    public int getTotalPorts() {
	    return totalPorts;
	}
	
	public void printArpTable() {
	    System.out.println("\nARP Table for " + name);
	    if (arpTable.isEmpty()) {
	        System.out.println("No entries.");
	    } else {
	        System.out.println("+----------------+-------------------+");
	        System.out.println("|   IP Address   |    MAC Address    |");
	        System.out.println("+----------------+-------------------+");
	        for (Map.Entry<String, String> entry : arpTable.entrySet()) {
	            System.out.printf("| %-14s | %-17s |\n", entry.getKey(), entry.getValue());
	        }
	        System.out.println("+----------------+-------------------+");
	    }
	}
	
	public static String generateUniqueMacAddress() {
	    String mac;
	    do {
	        mac = generateRandomMac();
	    } while (usedMacs.contains(mac));
	    usedMacs.add(mac);
	    return mac;
	}

	private static String generateRandomMac() {
	    // You can customize the OUI (first 3 bytes) if you like
	    byte[] macBytes = new byte[6];
	    random.nextBytes(macBytes);

	    // Force locally administered and unicast bits
	    macBytes[0] = (byte)(macBytes[0] & (byte)254);  // zero the multicast bit
	    macBytes[0] = (byte)(macBytes[0] | (byte)2);    // set the local bit

	    StringBuilder sb = new StringBuilder();
	    for (int i = 0; i < macBytes.length; i++) {
	        sb.append(String.format("%02X", macBytes[i]));
	        if (i != macBytes.length - 1) {
	            sb.append(":");
	        }
	    }
	    return sb.toString();
	}
}
