package Menus;

import java.util.List;
import java.util.Scanner;
import Devices.DHCPServer;

public class DHCPServerMenu {

	public static void manageDHCPServers(Scanner scanner, List<DHCPServer> dhcpServers) {
        if (dhcpServers.isEmpty()) {
            System.out.println("No DHCP servers available.");
            return;
        }

        while (true) {
            System.out.println("\n--- DHCP Server List ---");
            for (int i = 0; i < dhcpServers.size(); i++) {
                System.out.println((i + 1) + ". " + dhcpServers.get(i).getName());
            }
            System.out.println((dhcpServers.size() + 1) + ". Return to Main Menu");
            System.out.print("Select a DHCP server to manage: ");

            int serverChoice = Integer.parseInt(scanner.nextLine());

            if (serverChoice == dhcpServers.size() + 1) {
                return;
            }

            if (serverChoice < 1 || serverChoice > dhcpServers.size()) {
                System.out.println("Invalid selection. Please try again.");
                continue;
            }

            DHCPServer selectedServer = dhcpServers.get(serverChoice - 1);
            manageSingleDHCPServer(scanner, selectedServer);
        }
    }

    private static void manageSingleDHCPServer(Scanner scanner, DHCPServer dhcpServer, Topology topology) {
    	int choice;
    	
    	do
    	{
            System.out.println("\n--- Managing DHCP Server: " + dhcpServer.getName() + " ---");
            System.out.println("1. Configure Server IP Address");
            System.out.println("2. Create new IP pool");
            System.out.println("3. View All IP pools");
            System.out.println("4. Return to DHCP Server List");
            System.out.print("Select an option: ");

            choice = scanner.nextInt();

            switch (choice) {
            	case 1:
            		configureDHCPServerIpAddress(scanner, dhcpServer);
            		break;
                case 2:
                	dhcpServer.configureIpPool(scanner);
                    break;
                case 3:
                	dhcpServer.printPools();
                	topology.printPortConnections();
                    break;
                case 4:
                	System.out.println("Exiting DHCP Server Menu...");
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }while(choice!=3);
		
	}
    
    private static void configureDHCPServerIpAddress(Scanner scanner, DHCPServer dhcpServer) {
	    String currentIp = dhcpServer.getIpAddress();
	    if (currentIp == null || currentIp.isEmpty()) {
	        System.out.println("Current IP Address: IP not set");
	    } else {
	        System.out.println("Current IP Address: " + currentIp);
	    }

	    System.out.print("Would you like to set a new IP address? (Y/N): ");
	    String response = scanner.nextLine().trim().toLowerCase();
	    if (response.equalsIgnoreCase("Y")) {
	        System.out.print("Enter new IP address: ");
	        String newIp = scanner.nextLine();
	        dhcpServer.setIpAddress(newIp);
	        System.out.println("IP address updated to: " + newIp);
	    }
	}
}
