package Network;

import java.util.HashMap;  
import java.util.Map;

public class Topology {
	
	private Map<String, Map<String, Device>> networkTopology = new HashMap<>();
	private Map<String, Device> registeredDevices = new HashMap();
	private NetworkManager manager;

	public Topology() {}
	
	public void setNetworkManager(NetworkManager manager) {
		this.manager = manager;
	}
	
	public void registerDevice(Device device) {
		if (!networkTopology.containsKey(device.getName())) {
	        Map<String, Device> portMap = new HashMap<>();
	        for (int i = 0; i < device.getTotalPorts(); i++) {
	            portMap.put("Fa0/" + i, null);
	        }
	        networkTopology.put(device.getName(), portMap);
	        registeredDevices.put(device.getName(), device);
	    }
	}

	public boolean connectDevices(Device source, Device target) {
	    Map<String, Device> sourcePorts = networkTopology.get(source.getName());
	    Map<String, Device> targetPorts = networkTopology.get(target.getName());
	    
	    if (sourcePorts == null || targetPorts == null) {
	        System.out.println("One or both devices are not registered.");
	        return false;
	    }
	    
	    String availableSourcePort = null;
	    String availableTargetPort = null;
	    
	    for (Map.Entry<String, Device> entry : sourcePorts.entrySet()) {
	        if (entry.getValue() == null) {
	        	availableSourcePort = entry.getKey();
	            break;
	        }
	    }

	    for (Map.Entry<String, Device> entry : targetPorts.entrySet()) {
	        if (entry.getValue() == null) {
	            availableTargetPort = entry.getKey();
	            break;
	        }
	    }
	    
	    if (availableSourcePort == null) {
	        System.out.println(source.getName() + " has no available ports.");
	        return false;
	    }
	    
	    if (availableTargetPort == null) {
	        System.out.println(target.getName() + " has no available ports.");
	        return false;
	    }
	    

	    if (source instanceof Switch sw) {
	        sw.updateMacTable(target, availableSourcePort);
	    }
	    
	    sourcePorts.put(availableSourcePort, target);
	    targetPorts.put(availableTargetPort, source);
	    
	    if (source instanceof Switch && target instanceof Router) {
	        manager.connectSwitchToRouter((Switch) source, (Router) target);
	    } 
	    else if (source instanceof Device && target instanceof Switch) {
	        manager.connectDeviceToSwitch(source, (Switch) target);
	    } 
	    else if (source instanceof Switch s1 && target instanceof Switch s2) {
	        manager.connectDeviceToSwitch(s2, s1);  // connecting switch-to-switch, treat as connecting s2 to s1
	    }
	    else if (source instanceof Router && target instanceof Computer c) {
	        manager.connectDeviceToRouter(c, (Router) source);
	    }
	    else {
	        System.out.println("Unsupported connection type between " + source.getClass().getSimpleName() + " and " + target.getClass().getSimpleName());
	        return false;
	    }
	    
	    System.out.println(target.getName() + " connected to " + source.getName() + " on Port " + availableSourcePort);
	    
	    return true;
	}

	public void printNetworkTopology() {
        System.out.println("\nNetwork Topology (Port Connections):");
        for (Map.Entry<String, Map<String, Device>> entry : networkTopology.entrySet()) {
            String deviceName = entry.getKey();
            Map<String, Device> ports = entry.getValue();
            System.out.println("\nDevice: " + deviceName);
            System.out.println("+--------+-------------------+");
            System.out.println("| Port   | Connected Device   |");
            System.out.println("+--------+-------------------+");
            for (Map.Entry<String, Device> portEntry : ports.entrySet()) {
                String port = portEntry.getKey();
                Device connectedDevice = portEntry.getValue();
                String connectedName = (connectedDevice != null) ? connectedDevice.getName() : "Empty";
                System.out.printf("| %-6s | %-17s |\n", port, connectedName);
            }
            System.out.println("+--------+-------------------+\n");
        }
    }

	public Map<String, Device> getTopology() {
		return registeredDevices;
	}
}
