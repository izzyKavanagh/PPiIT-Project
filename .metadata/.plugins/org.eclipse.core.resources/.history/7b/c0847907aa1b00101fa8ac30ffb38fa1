package Network;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class Layer3Switch extends Switch implements DeviceWithCLI{
	
	private String ipAddress;
	private Map<Integer, VLANInterface> vlanInterfaces = new HashMap<>();
	
	private Map<String, List<String>> ipHelpers = new HashMap<>();
	
	public Layer3Switch(String name, String macAddress) {
		super(name, macAddress);
	}

    public String getIpAddress() {
        return ipAddress;
    }
	
    @Override
	public void configureVLAN(int vlanNumber, String vlanName) {
		getVlanTable().put(vlanNumber, vlanName);
        System.out.println("VLAN " + vlanNumber + " (" + vlanName + ") configured on Layer 3 Switch: " + name);
	}

	@Override
	public void assignPortToVLAN(String port, int vlanId) {
		getVlanPortMap().put(port, vlanId);
	    System.out.println("Port " + port + " assigned to VLAN " + vlanId + " on " + name);
	}
	
	
	public void configureVLANInterface(int vlanId, String ipAddress, String subnetMask) {
	    VLANInterface vlanInterface = new VLANInterface(ipAddress, subnetMask);
	    vlanInterfaces.put(vlanId, vlanInterface);
	    System.out.println("Configured interface VLAN " + vlanId + " with IP " + ipAddress + "/" + subnetMask);
	}

	public void addIpHelperAddress(int vlanId, String helperAddress) {
	    VLANInterface vlanInterface = vlanInterfaces.get(vlanId);
	    if (vlanInterface != null) {
	        vlanInterface.addHelperAddress(helperAddress);
	        System.out.println("Added helper address " + helperAddress + " to VLAN " + vlanId);
	    } else {
	        System.out.println("VLAN interface " + vlanId + " not configured.");
	    }
	}

	public void showVLANInterfaces() {
	    if (vlanInterfaces.isEmpty()) {
	        System.out.println("No VLAN interfaces configured.");
	    } else {
	        System.out.println("\nVLAN Interfaces:");
	        for (Map.Entry<Integer, VLANInterface> entry : vlanInterfaces.entrySet()) {
	            System.out.println("VLAN " + entry.getKey() + " - " + entry.getValue());
	        }
	    }
	}

	 @Override
	    public void configureIpHelper(String vlanInterface, String helperAddress) {
	        ipHelpers.computeIfAbsent(vlanInterface, k -> new ArrayList<>()).add(helperAddress);
	        System.out.println("Configured IP helper " + helperAddress + " on interface " + vlanInterface);
	    }

	    @Override
	    public void showIpHelpers() {
	        System.out.println("IP Helpers:");
	        ipHelpers.forEach((intf, helpers) -> {
	            System.out.println(intf + " -> " + helpers);
	        });
	    }

	    @Override
	    public void startCLI() {
	        Scanner sc = new Scanner(System.in);
	        String command;
	        System.out.println("Starting CLI for " + name);
	        while (true) {
	            System.out.print(name + "> ");
	            command = sc.nextLine();
	            if (command.equals("exit")) break;

	            if (command.startsWith("ip helper-address")) {
	                String[] parts = command.split(" ");
	                String vlanIntf = parts[2];
	                String helperAddr = parts[3];
	                configureIpHelper(vlanIntf, helperAddr);
	            } else if (command.equals("show ip helpers")) {
	                showIpHelpers();
	            } else {
	                System.out.println("Unknown command.");
	            }
	        }

}
