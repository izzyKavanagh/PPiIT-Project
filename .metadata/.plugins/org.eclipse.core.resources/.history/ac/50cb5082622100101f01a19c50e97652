package DeviceComponents;

import java.util.HashSet;
import java.util.Set;

import Network.ErrorMessages;

/**
 * Represents a pool of IP addresses that can be assigned to devices.
 * Manages available IPs within a subnet, along with related metadata like gateway and DNS server.
 */
public class IPPool {

	private Set<String> availableIPs = new HashSet<>();
    private String networkPrefix = "192.168.0."; // Default sub-net
    private String poolName;
    private String gatewayIP;
    private String dnsServerIP;
    private int poolNumber;
    
    /**
     * Gets the name of the IP pool.
     *
     * @return the pool name
     */
    public String getPoolName() {
		return poolName;
	}

    /**
     * Sets the name of the IP pool.
     *
     * @param poolName the name to assign to the IP pool
     */
	public void setPoolName(String poolName) {
		this.poolName = poolName;
	}

	/**
     * Gets the configured gateway IP for the pool.
     *
     * @return the gateway IP address
     */
	public String getGatewayIP() {
		return gatewayIP;
	}

	public void setGatewayIP(String gatewayIP) {
		this.gatewayIP = gatewayIP;
	}
	
	public String getDnsServerIP() {
	    return dnsServerIP;
	}

	public void setDnsServerIP(String dnsServerIP) {
	    this.dnsServerIP = dnsServerIP;
	}

	public int getPoolNumber() {
		return poolNumber;
	}

	public void setPoolNumber(int poolNumber) {
		this.poolNumber = poolNumber;
	}

	// Method to set an IP pool range 
    public IPPool(String poolName, int poolNumber, String gatewayIP) {
    	this.poolName = poolName;
        this.poolNumber = poolNumber;
        this.gatewayIP = gatewayIP;
    }
    
    public void setIpPoolRange(int start, int end, int subNetwork) {
        availableIPs.clear();
        
        this.networkPrefix = "192.168." + subNetwork + ".";
        
        for (int i = start; i <= end; i++) {
            availableIPs.add(networkPrefix + i);
        }
        System.out.println("IP Pool set: " + networkPrefix + start + " to " + networkPrefix + end);;
    }
    
    public Set<String> getAvailableIPs()
    {
    	return availableIPs;
    }
    
    public ErrorMessages checkIP(int startIP, int endIP, int subNetwork) {
    	if (subNetwork > 254 || subNetwork < 0) return ErrorMessages.INVALID_SUB_NETWORK_OUT_OF_BOUNDS;
        if (startIP == 0) return ErrorMessages.INVALID_IP_START_ZERO;
        if (startIP == 1) return ErrorMessages.INVALID_IP_START_ONE;
        if (startIP > 254 || startIP < 0) return ErrorMessages.INVALID_IP_OUT_OF_BOUNDS;
        if (endIP > 254 || endIP < 0) return ErrorMessages.INVALID_IP_OUT_OF_BOUNDS;
        if (endIP < startIP) return ErrorMessages.INVALID_IP_RANGE;
        return null;
    }
}
