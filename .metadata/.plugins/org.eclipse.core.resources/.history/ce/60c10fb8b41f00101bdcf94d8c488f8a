package Network;

import javax.swing.*;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Color;
import java.util.*;
import Devices.Device;

public class TopologyVisualiser extends JFrame {
	 private static final long serialVersionUID = 1L;
	    private Topology topology;

	    public TopologyVisualiser(Topology topology) {
	        this.topology = topology;
	        setTitle("Network Topology Viewer");
	        setSize(900, 650);
	        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	        add(new TopologyPanel());
	        setLocationRelativeTo(null);
	        setVisible(true);
	    }

	    // Custom panel for drawing topology
	    class TopologyPanel extends JPanel {
	        private static final long serialVersionUID = 1L;
	        Map<String, Point> devicePositions = new HashMap<>();

	        @Override
	        protected void paintComponent(Graphics g) {
	            super.paintComponent(g);

	            Map<String, List<String>> adjacencyList = topology.updateAdjacencyList();
	            Map<String, Device> devices = topology.getRegisteredDevices();

	            // Assign structured positions if not already assigned
	            if (devicePositions.isEmpty()) {
	                assignStructuredPositions(devices);
	            }

	            // Draw connections (lines)
	            g.setColor(Color.GRAY);
	            for (Map.Entry<String, List<String>> entry : adjacencyList.entrySet()) {
	                String deviceName = entry.getKey();
	                Point p1 = devicePositions.get(deviceName);
	                for (String connectedDevice : entry.getValue()) {
	                    Point p2 = devicePositions.get(connectedDevice);
	                    g.drawLine(p1.x, p1.y, p2.x, p2.y);
	                }
	            }

	            // Draw devices (circles)
	            for (Map.Entry<String, Point> entry : devicePositions.entrySet()) {
	                String deviceName = entry.getKey();
	                Point p = entry.getValue();

	                g.setColor(Color.CYAN);
	                g.fillOval(p.x - 20, p.y - 20, 40, 40);

	                g.setColor(Color.BLACK);
	                g.drawOval(p.x - 20, p.y - 20, 40, 40);

	                // Device name label
	                g.drawString(deviceName, p.x - 25, p.y - 25);
	            }
	        }

	        private void assignStructuredPositions(Map<String, Device> devices) {
	            int width = getWidth();
	            int routerY = 50;
	            int switchY = 200;
	            int pcY = 350;
	            int serverY = 450;

	            int routerX = width / 2;
	            int switchX = 150;
	            int pcX = 50;
	            int serverX = 50;

	            int switchSpacing = 150;
	            int pcSpacing = 100;
	            int serverSpacing = 100;

	            for (Device device : devices.values()) {
	                String type = device.getClass().getSimpleName();

	                if (type.contains("Router")) {
	                    devicePositions.put(device.getName(), new Point(routerX, routerY));
	                } else if (type.contains("Switch")) {
	                    devicePositions.put(device.getName(), new Point(switchX, switchY));
	                    switchX += switchSpacing;
	                } else if (type.equals("Computer")) {
	                    devicePositions.put(device.getName(), new Point(pcX, pcY));
	                    pcX += pcSpacing;
	                } else if (type.contains("Server")) {
	                    devicePositions.put(device.getName(), new Point(serverX, serverY));
	                    serverX += serverSpacing;
	                }
	            }
	        }
	    }
}
