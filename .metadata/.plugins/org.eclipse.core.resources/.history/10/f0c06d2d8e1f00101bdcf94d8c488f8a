package Menus;

import java.util.List;  
import java.util.Map;
import java.util.Scanner;

import DeviceComponents.IPPool;
import Devices.Computer;
import Devices.DHCPServer;
import Network.NetworkManager;
import Network.Topology;

public class PCMenu {
	
	public static void managePCs(Scanner scanner, DHCPServer dhcpServer, List<Computer> computers, NetworkManager manager) {
		
		 while (true) {
			 System.out.println("\n===== PC Management =====");
	         for (int i = 0; i < computers.size(); i++) 
	         {
	        	 Computer pc = computers.get(i);
	        	 
	        	 System.out.print((i + 1) + ". " + pc.getName() + " (IP: ");
	        	 
	        	 if (pc.getIpAddress() == null) 
	        	 {
	        		    System.out.print("Not Assigned");
	        	 } 
	        	 else 
	        	 {
	        		 System.out.print(pc.getIpAddress());
	        	 }
	        	 
	        	 System.out.print(", DNS: ");
	        	 
	        	 if (pc.getDnsServerIP() == null) 
	        	 {
	        		    System.out.print("Not Assigned");
	        	 } 
	        	 else 
	        	 {
	        		 System.out.print(pc.getDnsServerIP());
	        	 }
	        	 
	        	 System.out.print(", DHCP: ");

	        	 if (!pc.staticIP) 
	        	 {
	        		 System.out.println("Enabled)");
	        	 } 
	        	 else 
	        	 {
	        		 System.out.println("Disabled)");
	        	 }
	         }
	         
	         System.out.println((computers.size() + 1) + ". Return to Main Menu");
	         System.out.print("Select a PC to manage: ");

	         int pcChoice = scanner.nextInt();
	         scanner.nextLine(); // Consume newline

	         if (pcChoice == computers.size() + 1) return; // Return to main menu

	         if (pcChoice < 1 || pcChoice > computers.size()) 
	         {
	        	 System.out.println("Invalid selection! Try again.");
	             continue;
	         }

	         Computer selectedPC = computers.get(pcChoice - 1);
	         configurePC(scanner, dhcpServer, computers, selectedPC, manager);
	     }
	}

	private static void configurePC(Scanner scanner, DHCPServer dhcpServer, List<Computer> computers, Computer pc, NetworkManager manager) {
		
		Topology topology = manager.getTopology();
		
		System.out.println("\nManaging " + pc.getName());
		
		System.out.print("Current IP: ");
		
		if (pc.getIpAddress() == null) {
		    System.out.println("Not Assigned");
		} 
		else 
		{
		    System.out.println(pc.getIpAddress());
		}

		System.out.print("DHCP Enabled: ");
		
		if (!pc.staticIP) 
		{
		    System.out.println("Yes");
		} 
		else 
		{
		    System.out.println("No");
		}

		System.out.println("1. Send Message");
		System.out.println("2. Open web browser");
		System.out.println("3. Enable DHCP");
	    System.out.println("4. Disable DHCP (Use Static IP)");
	    if(pc.staticIP) 
	    {
	    	System.out.println("5. Add DNS server");
	    }
	    System.out.println("6. Return to PC Menu");
	    System.out.print("Enter your choice: ");
	    
	    int choice = scanner.nextInt();
	    scanner.nextLine(); // Consume newline
	    
	    switch (choice) {
	    case 1:
	    	for (int i = 0; i < computers.size(); i++) {
		        System.out.println((i + 1) + ". " + computers.get(i).getName());
		    }
		    
		    System.out.print("Select PC to send Message to: ");
		    int computerChoice = scanner.nextInt() - 1;
		    scanner.nextLine();

		    if (computerChoice < 0 || computerChoice >= computers.size()) {
		        System.out.println("Invalid selection.");
		        return;
		    }

		    Computer selectedComputer = computers.get(computerChoice);
		    
		    if(topology.findConnectedDeviceByName(pc, selectedComputer.getName()) == null) 
		    {
		    	System.out.println("ERROR: " + pc.getName() + " and " + selectedComputer.getName() + " are not connected to the same network.");
		    	return;
		    }
		    
		    String destinationIP = selectedComputer.getIpAddress();

		    if(destinationIP == null)
		    {
		    	System.out.println("ERROR: " + selectedComputer.getName() + "'s IP address is NULL");
		    	return;
		    }
		    
	        System.out.print("Enter message: ");
	        String message = scanner.nextLine();
	        
	        pc.sendMessage(destinationIP, message, topology);
	        
	        break;
	    case 2: 
	    	System.out.print("Enter the domain name you want to search for: ");
		    String domain = scanner.nextLine();
		    
		    if(pc.getDnsServerIP() == null) {
		    	System.out.println("ERROR: " + pc.getName() + " does not have a DNS server");
		    }
		    
		    Device device = topology.findConnectedDeviceByIP(pc, pc.getDnsServerIP());
	    	//pc.visitDomain(domain);
	    	
	    	break;
        case 3:
        	Map<String, IPPool> pools = dhcpServer.getPools(); // Assuming this method exists

            if (pools.isEmpty()) 
            {
                System.out.println("No available IP Pools.");
                return;
            }
	               
            String helperIP = manager.findLayer3Device(pc);
           	
           	if(helperIP == null)
           	{
           		return;
           	}
           	
           	manager.findDHCPServer(pc, pc.getGatewayIp(), helperIP);
               
            pc.staticIP = false;
               
            System.out.println(pc.getName() + " is now using DHCP with IP: " + pc.getIpAddress());
            break;
        case 4:
        	pc.staticIP = true;
       		manager.useStaticIpAllocation(pc);
       		System.out.println(pc.getName() + " is now using Static IP.");
       		break;
        case 5:
        	System.out.print("Enter DNS server IP: ");
        	String dnsIP = scanner.nextLine();
        	pc.setDnsServerIP(dnsIP);
            return;
        case 6:
            return;

        default:
            System.out.println("Invalid choice! Try again.");
    }
			
		}
}
