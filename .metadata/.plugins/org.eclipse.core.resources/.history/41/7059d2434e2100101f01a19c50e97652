package Devices;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Random;
import java.util.Set;

/**
 * Abstract class representing a generic network device.
 * Provides common attributes and methods used by all types of devices.
 */

public abstract class Device {

	protected String name;
    protected String macAddress;
    public String ipAddress;
    protected String gatewayIP;
    protected String dnsServerIP;
    protected Router connectedRouter;
	protected Switch connectedSwitch;
	public boolean staticIP; // default is static IP
	protected int totalPorts;
	protected int vlanId;
	
	protected Map<String, String> arpTable = new HashMap<>();
	private static final Set<String> usedMacs = new HashSet<>();
	private static Random random = new Random();

	/**
     * Adds an entry to the ARP table.
     * 
     * @param ip  The IP address to map.
     * @param mac The corresponding MAC address.
     */
	public void addArpEntry(String ip, String mac) {
	    arpTable.put(ip, mac);
	}

	/**
     * Looks up a MAC address in the ARP table using the given IP address.
     * 
     * @param ip The IP address to look up.
     * @return The associated MAC address, or null if not found.
     */
	public String lookupMac(String ip) {
	    return arpTable.get(ip);
	}

	/**
     * Gets the VLAN ID for this device.
     * 
     * @return VLAN ID.
     */
    public int getVlanId() {
		return vlanId;
	}

    /**
     * Sets the VLAN ID for this device.
     * 
     * @param vlandId The VLAN ID to assign.
     */
	public void setVlanId(int vlandId) {
		this.vlanId = vlandId;
	}
	
	public void setDnsServerIP(String dnsServerIP) {
	    this.dnsServerIP = dnsServerIP;
	}

	public String getDnsServerIP() {
	    return dnsServerIP;
	}

	public Device(String name, String macAddress) {
        this.name = name;
        this.macAddress = macAddress;
        this.ipAddress = null; // Assigned by DHCP
        this.staticIP = true;
    }

    public String getName() {
        return name;
    }

    public String getMacAddress() {
        return macAddress;
    }

    public void setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
    }
    
    public String getIpAddress() {
        return ipAddress;
    }
    
    public void setGatewayIp(String gatewayIP) {
        this.gatewayIP = gatewayIP;
    }
    
    public String getGatewayIp() {
        return gatewayIP;
    }
    
    public int getTotalPorts() {
	    return totalPorts;
	}
	
	public void printArpTable() {
	    System.out.println("\nARP Table for " + name);
	    if (arpTable.isEmpty()) {
	        System.out.println("No entries.");
	    } else {
	        System.out.println("+----------------+-------------------+");
	        System.out.println("|   IP Address   |    MAC Address    |");
	        System.out.println("+----------------+-------------------+");
	        for (Map.Entry<String, String> entry : arpTable.entrySet()) {
	            System.out.printf("| %-14s | %-17s |\n", entry.getKey(), entry.getValue());
	        }
	        System.out.println("+----------------+-------------------+");
	    }
	}

	public static String generateUniqueMacAddress() {
	    String mac;
	    do {
	        mac = String.format("02:%02X:%02X:%02X:%02X:%02X",
	            random.nextInt(256),
	            random.nextInt(256),
	            random.nextInt(256),
	            random.nextInt(256),
	            random.nextInt(256));
	    } while (usedMacs.contains(mac));
	    
	    usedMacs.add(mac);
	    return mac;
	}
}
